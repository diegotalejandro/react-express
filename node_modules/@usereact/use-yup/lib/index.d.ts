import { Schema } from 'yup';
declare type Values = {
    [field: string]: any;
};
declare type ValidationErrors<T> = {
    [K in keyof T]?: T[K] extends object ? ValidationErrors<T[K]> : string;
};
declare type ValidationResult<T> = {
    errors: ValidationErrors<T>;
    isValid: boolean;
};
declare type UseYupOptions = {
    validateOnChange?: boolean;
};
declare function useYup<T extends Values>(values: T, validationSchema: Schema<any>, options?: UseYupOptions): {
    validate: () => Promise<ValidationResult<T>>;
    errors: ValidationErrors<T>;
    isValid: boolean;
};
export default useYup;
